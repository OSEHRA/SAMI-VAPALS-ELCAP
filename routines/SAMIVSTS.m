SAMIVSTS ;;ven/arc/lgc - M2M Broker to build TIU for VA-PALS ; 1/21/19 10:22am
 ;;18.0;SAMI;;
 ;
 ; VA-PALS will be using Sam Habiel's [KBANSCAU] broker
 ;   to pull information from the VA server into the
 ;   VA-PALS client and, to push TIU notes generated by
 ;   VA-PALS forms onto the VA server.
 ; Using this broker between VistA instances requires
 ;   not only the IP and Port for the server be known,
 ;   but also, that the Access and Verify of the user
 ;   on the server be sent across as well.  This is
 ;   required as the user on the server must have the
 ;   necessary Context menu(s) allowing use of the
 ;   Remote Procedure(s).
 ; Six parameters have been added to the client
 ;   VistA to prevent the necessity of hard coding
 ;   certain values and to allow for default values for others.
 ;   SAMI PORT
 ;   SAMI IP ADDRESS
 ;   SAMI ACCVER
 ;   SAMI DEFAULT PROVIDER
 ;   SAMI DEFAULT STATION NUMBER
 ;   SAMI TIU NOTE PRINT NAME
 ;   SAMI DEFAULT CLINIC IEN
 ;   SAMI SYSTEM TEST PATIENT DFN
 ; Note that the user selected must have active
 ;   credentials on both the Client and Server systems
 ;   and the following Broker context menu.
 ;      OR CPRS GUI CHART
 ;
 ;
 ;@routine-credits
 ;@primary development organization: Vista Expertise Network
 ;@primary-dev: Larry G. Carlson (lgc)
 ;@primary-dev: Alexis R. Carlson (arc)
 ;@copyright:
 ;@license: Apache 2.0
 ; https://www.apache.org/licenses/LICENSE-2.0.html
 ;
 ;@last-updated: 2018-09-26
 ;@application: VA-PALS
 ;@version: 1.0
 ;
 ;
 ;@sac-exemption
 ; sac 2.2.8 Vendor specific subroutines may not be called directly
 ;  except by Kernel, Mailman, & VA Fileman.
 ; sac 2.3.3.2 No VistA package may use the following intrinsic
 ;  (system) variables unless they are accessed using Kernel or VA
 ;  FileMan supported references: $D[EVICE], $I[O], $K[EY],
 ;  $P[RINCIPAL], $ROLES, $ST[ACK], $SY[STEM], $Z*.
 ;  (Exemptions: Kernel & VA Fileman)
 ; sac 2.9.1: Application software must use documented Kernel
 ;  supported references to perform all platform specific functions.
 ;  (Exemptions: Kernel & VA Fileman)
 ;
 ; not from the top
 q
 ;
 ;
 ;@rpi - HMP PATIENT SELECT
 ;@oi - SAMI PULL VA-PALS PATIENTS
 ;@API-code: D ALLPTS^SAMIVSTS
ALLPTS ; Get all patients from a server by sequentially calling
 ;  for last names beginning with each letter of the
 ;  alphabet, building a complete array of patient names
 ;  in the ^KBAP("ALLPTS") global.  Once all the patient
 ;  names and demographics are pulled into this global,
 ;  the information is parsed into the 'patient-information'
 ;  graph in VA-PALS graph store database.
 ; Note : call directly or schedule option
 ;  SAMI PULL VA-PALS PATIENTS
 ;
 ;multi-dev;API;Procedure;clean;silent;sac exemption;0% tests
 ;@oi  - option interface
 d ALLPTS1("ALLPTS")
 ; Now build a new 'patient-lookup' graph
 d MKGPH
 q
 ;
 ;ENTER
 ;  SAMISS = Subscript name within ^KBAP global
 ;           to use for patient array
 ;           Specifically designed for UNIT TEST where
 ;           we don't wish to corrupt existing data set
ALLPTS1(SAMISS) ; Build ^KBAP("ALLPTS" global
 n SAMIXD,fini,CNTXT,RMPRC,CONSOLE,CNTNOPEN,SAMIXARR
 s CNTXT="HMP UI CONTEXT"
 s RMPRC="HMP PATIENT SELECT"
 s (CONSOLE,CNTNOPEN)=0
 s:'$l($g(SAMISS)) SAMISS="ALLPTS"
 ;
 k ^KBAP(SAMISS)
 n I,J F I=65:1:90 d
 . s fini=$c(I)
 . k SAMIXARR
 . s SAMIXARR(1)="NAME"
 . s SAMIXARR(2)=fini
 . d M2M^SAMIM2M(.SAMIXD,CNTXT,RMPRC,CONSOLE,CNTNOPEN,.SAMIXARR)
 . f J=1:1:$l(SAMIXD,$c(13,10)) d
 .. q:'$l($p(SAMIXD,$c(13,10),J))
 .. s ^KBAP(SAMISS,fini,J)=$p(SAMIXD,$c(13,10),J)
 ;
 q
 ;
 ;
 ; Make Graph Store patient-lookup global from
 ;  ^KBAP("ALLPTS")
 ; e.g.
 ;   D MKGPH^KBAPUTL
MKGPH q:'$d(^KBAP("ALLPTS"))
 n si s si=$$CLRGRPS("patient-lookup")
 q:'$g(si)
 n gien,node,ptdata,root
 s root=$$setroot^%wd("patient-lookup")
 s gien=0
 n node s node=$na(^KBAP("ALLPTS"))
 n snode S snode=$p(node,")")
 f  S node=$Q(@node) q:node'[snode  d
 . s ptdata=@node
 . s gien=gien+1
 . s @root@(gien,"saminame")=$p(ptdata,"^",4)
 . s @root@(gien,"sinamef")=$p($p($p(ptdata,"^",4),",",2)," ")
 . s @root@(gien,"sinamel")=$p($p(ptdata,"^",4),",")
 . s @root@(gien,"sbdob")=$e($p(ptdata,"^",10),1,4)_"-"_$e($p(ptdata,"^",10),5,6)_"-"_$e($p(ptdata,"^",10),7,8)
 . s @root@(gien,"last5")=$p(ptdata,"^",9)
 . s @root@(gien,"dfn")=$p(ptdata,"^",12)
 . s @root@(gien,"gender")=$p($p($p(ptdata,"pat-gender",2),"^",1,2),":",2)
 . s:($l($p(ptdata,"^",12))) @root@("dfn",$p(ptdata,"^",12),gien)=""
 . s:($l($p(ptdata,"^",9))) @root@("last5",$p(ptdata,"^",9),gien)=""
 .; Mixed case
 . s:($l($p(ptdata,"^",4))) @root@("name",$p(ptdata,"^",4),gien)=""
 .; Upper case
 . s:($l($p(ptdata,"^",1))) @root@("name",$p(ptdata,"^",1),gien)=""
 . i $l($p(ptdata,"^",4)) D
 .. s @root@("saminame",$p(ptdata,"^",4),gien)=""
 . i $l($p($p($p(ptdata,"^",4),",",2)," ")) D
 .. s @root@("sinamef",$p($p($p(ptdata,"^",4),",",2)," "),gien)=""
 . i $l($p($p(ptdata,"^",4),",")) D
 .. s @root@("sinamel",$p($p(ptdata,"^",4),","),gien)=""
 s @root@("Date Last Updated")=$$HTE^XLFDT($H)
 q
 ;
 ;
 ;
 ;@rpi - PXRM REMINDERS AND CATEGORIES
 ;@oi - SAMI PULL REMINDERS
 ;@API-code: $$Reminders^SAMIVSTS -or- D Reminders^SAMIVSTS
 ; Pull Remiders off the server and build the
 ;    'reminders' Graphstore
 ;Enter
 ;   nothing required
 ;Return
 ;   If called as extrinsic
 ;      0 = rebuild of "reminders" Graphstore failed
 ;      n = number of reminders filed
RMDRS() ;
 n CNTXT,RMPRC,CONSOLE,CNTNOPEN,SAMIXARR
 s CNTXT="OR CPRS GUI CHART"
 s RMPRC="PXRM REMINDERS AND CATEGORIES"
 s (CONSOLE,CNTNOPEN)=0
 d M2M^SAMIM2M(.SAMIXD,CNTXT,RMPRC,CONSOLE,CNTNOPEN,.SAMIXARR)
 ; if successful continue
 i '$l(SAMIXD,$c(13,10)) q:$Q 0  q
 n si s si=$$CLRGRPS("reminders")
 i '$g(si) q:$Q 0  q
 n root s root=$$setroot^%wd("reminders")
 n gien s gien=0
 n I,rcnt,type,ien,name,prntname,rmdr
 s rcnt=0
 n i f i=1:1:$l(SAMIXD,$c(13,10)) d
 . s rmdr=$p(SAMIXD,$c(13,10),i)
 . q:($l(rmdr,"^")<3)
 . s rcnt=$g(rcnt)+1
 . s type=$p(rmdr,U)
 . s ien=$p(rmdr,U,2)
 . s name=$p(rmdr,U,3)
 . s prntname=$p(rmdr,U,4)
 . ;
 . s gien=gien+1
 . s @root@(gien,"type")=type
 . s @root@(gien,"ien")=ien
 . s @root@(gien,"name")=name
 . s @root@(gien,"printname")=prntname
 s @root@("Date Last Updated")=$$HTE^XLFDT($H)
 q:$Q rcnt  q
 ;
 ;
 ;
 ;@rpi -  ORQPT PROVIDERS
 ;@oi - SAMI PULL PROVIDERS
 ;@API-code: $$Providers^SAMIVSTS -or- D Providers^SAMIVSTS
 ; Pull Providers off the server and build the
 ;    'providers' Graphstore
 ;Enter
 ;   nothing required
 ;Return
 ;   If called as extrinsic
 ;      0 = rebuild of "providers" Graphstore failed
 ;      n = number of providers filed
PRVDRS() ;
 n CNTXT,RMPRC,CONSOLE,CNTNOPEN,SAMIXARR
 s CNTXT="OR CPRS GUI CHART"
 s RMPRC="ORQPT PROVIDERS"
 s (CONSOLE,CNTNOPEN)=0
 d M2M^SAMIM2M(.SAMIXD,CNTXT,RMPRC,CONSOLE,CNTNOPEN,.SAMIXARR)
 ; if successful continue
 i '$l(SAMIXD,$c(13,10)) q:$Q 0  q
 n si s si=$$CLRGRPS("providers")
 i '$g(si) q:$Q 0  q
 n root s root=$$setroot^%wd("providers")
 n gien s gien=0
 n I,pcnt,provduz,name,prvdr
 s pcnt=0
 f I=1:1:$l(SAMIXD,$c(13,10)) d
 . s prvdr=$p(SAMIXD,$c(13,10),I)
 . q:($l(prvdr,"^")<2)
 . s pcnt=$g(pcnt)+1
 . s provduz=$p(prvdr,U)
 . s name=$p(prvdr,U,2)
 . ;
 . s gien=gien+1
 . s @root@(gien,"duz")=provduz
 . s @root@(gien,"name")=name
 s @root@("Date Last Updated")=$$HTE^XLFDT($H)
 q:$Q pcnt  q
 ;
 ;
 ;
 ;@pi - SAMI PULL CLINICS
 ;@rpi -  ORWU1 NEWLOC
 ;@API-code: $$Clinics^SAMIVSTS -or- D Clinics^SAMIVSTS
 ; Pull Clinics off the server and build the
 ;    'clinics' Graphstore
 ;Enter
 ;   nothing required
 ;Return
 ;   If called as extrinsic
 ;      0 = rebuild of "clinics" Graphstore failed
 ;      n = number of clinics filed
CLINICS() ;
 N CNTXT,RMPRC,CONSOLE,CNTNOPEN,SAMIXARR
 S CNTXT="OR CPRS GUI CHART"
 S RMPRC="ORWU1 NEWLOC"
 S (CONSOLE,CNTNOPEN)=0
 K SAMIXARR
 S SAMIXARR(1)=" "
 S SAMIXARR(2)=1
 D M2M^SAMIM2M(.SAMIXD,CNTXT,RMPRC,CONSOLE,CNTNOPEN,.SAMIXARR)
 ; if successful continue
 i '$l(SAMIXD,$c(13,10)) q:$Q 0  q
 n si s si=$$CLRGRPS("clinics")
 i '$g(si) q:$Q 0  q
 n root s root=$$setroot^%wd("clinics")
 n gien s gien=0
 n I,ccnt,clinien,name,cnc
 s ccnt=0
 f I=1:1:$l(SAMIXD,$c(13,10)) d
 . s cnc=$p(SAMIXD,$c(13,10),I)
 . q:($l(cnc,"^")<2)
 . s ccnt=$g(ccnt)+1
 . s clinien=$p(cnc,U)
 . s name=$p(cnc,U,2)
 . ;
 . s gien=gien+1
 . s @root@(gien,"ien")=clinien
 . s @root@(gien,"name")=name
 S @root@("Date Last Updated")=$$HTE^XLFDT($H)
 q:$Q ccnt  q
 ;
 ;
 ;@oi - SAMI PULL HEALTH FACTORS
 ;@rpi - ORWPCE GET HEALTH FACTORS TY
 ;@API-code: $$HealthFactors^SAMIVSTS -or- D HealthFactors^SAMIVSTS
 ; Pull Health Factors  off the server and build the
 ;    'health-factors' Graphstore
 ;Enter
 ;   nothing required
 ;Return
 ;   If called as extrinsic
 ;      0 = rebuild of "health-factors" Graphstore failed
 ;      n = number of health factors filed
HLTHFCT() ; Clear the M Web Server files cache
 ;VEN/arc;test;function/procedure;dirty;silent;non-sac
 N CNTXT,RMPRC,CONSOLE,CNTNOPEN,SAMIXARR
 S CNTXT="OR CPRS GUI CHART"
 S RMPRC="ORWPCE GET HEALTH FACTORS TY"
 S (CONSOLE,CNTNOPEN)=0
 D M2M^SAMIM2M(.SAMIXD,CNTXT,RMPRC,CONSOLE,CNTNOPEN,.SAMIXARR)
 ; if successful continue
 I '$l(SAMIXD,$c(13,10)) q:$Q 0  q
 n si s si=$$CLRGRPS("health-factors")
 I '$g(si) q:$Q 0  q
 n root s root=$$setroot^%wd("health-factors")
 n gien s gien=0
 N I,hcnt,ien,name,hfct
 S hcnt=0
 f I=1:1:$l(SAMIXD,$c(13,10)) d
 . s hfct=$p(SAMIXD,$c(13,10),I)
 . q:($l(hfct,"^")<2)
 . s hcnt=$g(hcnt)+1
 . s ien=$p(hfct,U)
 . s name=$p(hfct,U,2)
 . ;
 . s gien=gien+1
 . s @root@(gien,"ien")=ien
 . s @root@(gien,"name")=name
 . s:$l(name) @root@("name",name,gien)=""
 S @root@("Date Last Updated")=$$HTE^XLFDT($H)
 q:$Q hcnt  q
 ;
 ;
 ;@API-code: $$CLRGRPS^SAMIVSTS
 ;
 ; Clear a Graphstore global of data
 ;Enter
 ;   name = name of the Graphstore to clear
 ;Return
 ; if called as extrinsic function
 ;   0 = failure to find named Graphstore
 ;   ien (si) of the Graphstore in ^%wd(17.040801,
CLRGRPS(name) ;
 i '($l($g(name))) q:$Q 0  q
 n si s si=$o(^%wd(17.040801,"B",name,0))
 i $g(si) k ^%wd(17.040801,si) s ^%wd(17.040801,si,0)=name
 e  d purgegraph^%wd(name) s si=$o(^%wd(17.040801,"B",name,0))
 q:$Q $g(si)  q
 ;
EOR ; End of routine SAMIVSTS
