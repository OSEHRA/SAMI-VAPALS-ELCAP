SAMIUTVS ;ven/arc/lgc - UNIT TEST for SAMIVST4 ;Oct 09, 2019@17:28
 ;;18.0;SAMI;;
 ;
 ;@license: see routine SAMIUL
 ;
 ; VA-PALS will be using Sam Habiel's [KBANSCAU] broker
 ;   to pull information from the VA server into the
 ;   VA-PALS client and, to push TIU notes generated by
 ;   VA-PALS forms onto the VA server.
 ; Using this broker between VistA instances requires
 ;   not only the IP and Port for the server be known,
 ;   but also, that the Access and Verify of the user
 ;   on the server be sent across as well.  This is
 ;   required as the user on the server must have the
 ;   necessary Context menu(s) allowing use of the
 ;   Remote Procedure(s).
 ; Seven parameters have been added to the client
 ;   VistA to prevent the necessity of hard coding
 ;   certain values and to allow for default values for others.
 ;   SAMI PORT
 ;   SAMI IP ADDRESS
 ;   SAMI ACCVER
 ;   SAMI DEFAULT PROVIDER
 ;   SAMI DEFAULT STATIOn NUMBER
 ;   SAMI TIU NOTE PRINT NAME
 ;   SAMI DEFAULT CLINIC IEN
 ; Note that the user selected must have active
 ;   credentials on both the Client and Server systems
 ;   and the following Broker context menu.
 ;      OR CPRS GUI CHART
 ;
 ; @section 0 primary development
 ;
 ; @routine-credits
 ; @primary-dev: Larry Carlson (lgc)
 ;  larry@fiscientific.com
 ; @primary-dev-org: Vista Expertise Network (ven)
 ;  http://vistaexpertise.net
 ; @copyright: 2012/2018, ven, all rights reserved
 ; @license: see routine SAMIUL
 ;
 ; additional-dev: Linda M.R.Yaw (lmry)
 ;  linda.yaw@vistaexpertise.net
 ;
 ; @application: SAMI
 ; @version: 18.0
 ; @patch-list: none yet
 ;
 ; @sac-exemption
 ;  sac 2.2.8 Vendor specific subroutines may not be called directly
 ;   except by Kernel, Mailman, & VA Fileman.
 ;  sac 2.3.3.2 No VistA package may use the following intrinsic
 ;   (system) variables unless they are accessed using Kernel or VA
 ;   FileMan supported references: $D[EVICE], $I[O], $K[EY],
 ;   $P[RINCIPAL], $ROLES, $ST[ACK], $SY[STEM], $Z*.
 ;   (Exemptions: Kernel & VA Fileman)
 ;  sac 2.9.1: Application software must use documented Kernel
 ;   supported references to perform all platform specific functions.
 ;   (Exemptions: Kernel & VA Fileman)
 ;  ============== UNIT TESTS ======================
 ;  NOTE: Unit tests will pull data using the local
 ;       client VistA files rather than risk degrading
 ;       large datasets in use.  NEVERTHELESS, it is
 ;       recommended that UNIT TESTS be run when
 ;       VA-PALS is not in use as some Graphstore globals
 ;       are temporarily moved while testing is running.
 ;
 ; @to-do
 ;
 ; @section 1 code
 ;
START if $text(^%ut)="" write !,"*** UNIT TEST NOT INSTALLEd ***" quit
 do EN^%ut($text(+0),2)
 quit
 ;
STARTUP new utsuccess
 quit
 ;
SHUTDOWN ; ZEXCEPT: utsuccess
 kill utsuccess
 quit
 ;
UTMGPH ; @TEST - Test making 'patient-lookup' Graphstore
 if '$data(^SAMIUT("ALLPTS")) do  quit
 .  do FAIL^%ut("^SAMIUT(""ALLPTS"") must exist for TESTING")
 ;
 do MKGPH^SAMIVSTA ; Rebuild 'patient-lookup' Graphstore
 ; Check that the Graphstore was built
 new ptlkup set ptlkup="^%wd(17.040801,""B"",""patient-lookup"")"
 new si set si=$order(@ptlkup@(0))
 if '$get(si) do  quit
 . do FAIL^%ut("MKGPH entry did not build 'patient-lookup' Graphstore")
 ;
 new node,snode,root,gien,dfn,PTDATA
 ;
 set root=$$setroot^%wd("patient-lookup")
 ;
 set node=$name(^SAMIUT("ALLPTS")),snode=$piece(node,")")
 set utsuccess=1
 for  set node=$query(@node) quit:node'[snode  do  quit:'utsuccess
 . set PTDATA=@node
 . set dfn=$piece(PTDATA,"^",12)
 . set gien=$order(@root@("dfn",dfn,0))
 . if '$get(gien) set utsuccess=0 quit
 .;
 .; Now compare the entries in this Graphstore node with
 .;  the information in the respective ^SAMIUT("ALLPTS" node
 . if '$order(@root@("last5",$p(PTDATA,"^",9),0)) set utsuccess=0 quit
 . if '$length($piece(PTDATA,"^")) set utsuccess=0 quit
 . if '$order(@root@("name",$piece(PTDATA,"^"),0)) set utsuccess=0 quit
 . if '$length($piece(PTDATA,"^",4)) set utsuccess=0 quit
 . if '$order(@root@("name",$piece(PTDATA,"^",4),0)) set utsuccess=0 quit
 . if '$order(@root@("saminame",$p(PTDATA,"^",4),0)) set utsuccess=0 quit
 ;
 if 'utsuccess do  quit
 . do FAIL^%ut("'patient-lookup' Graphstore incorrectly built")
 do CHKEQ^%ut(utsuccess,1,"Testing Complete Graphstore build  FAILED!")
 quit
 ;
UTAPTS ; @TEST - Test pulling patient data through broker
 kill ^SAMIUT("ALLPTS UNITTEST")
 do ALLPTS1^SAMIVSTA("ALLPTS UNITTEST")
 ;                in file 2         in ALLPTS
 ;  NAME            piece 1          piece 1
 ;  sex             piece 2          piece 6
 ;  birthdate       piece 3 fmdt     piece 10 (yyyymmdd)
 ;
 ; Pull NAME from file 2 B cross
 ;   Get NAME,sex,birthdate,build last5
 ; Pull entry in Graphstore using last5
 ;   Knowing gien get NAME,sex,birthdate
 ; Compare
 new NAME2,SEX2,DOB2,LAST52,DFN2
 new NODE2,NODEG,gien
 new root set root=$$setroot^%wd("patient-lookup")
 set utsuccess=1
 set DFN2=0
 for  set DFN2=$order(^DPT(DFN2)) quit:'DFN2  do  quit:'utsuccess
 . set NODE2=$get(^DPT(DFN2,0))
 . set NAME2=$piece(NODE2,"^")
 . set SEX2=$$UP^XLFSTR($extract($piece(NODE2,"^",2)))
 . set DOB2=$$FMTHL7^XLFDT($piece(NODE2,"^",3))
 . set DOB2=$extract(DOB2,1,4)_"-"_$extract(DOB2,5,6)_"-"_$extract(DOB2,7,8)
 . set gien=$order(@root@("dfn",DFN2,0))
 . set LAST52=$$UP^XLFSTR($extract(NAME2))_$extract($piece(NODE2,"^",9),6,9)
 . if '$get(gien) set utsuccess=0 quit
 . if '$data(@root@("name",NAME2,gien)) set utsuccess=0 quit
 . if '($piece($get(@root@(gien,"gender")),"^")=SEX2) do  quit
 .. set utsuccess=0
 . if '$data(@root@("last5",LAST52,gien)) set utsuccess=0 quit
 . if '($get(@root@(gien,"sbdob"))=DOB2) set utsuccess=0 quit
 kill ^SAMIUT("ALLPTS UNITTEST")
 if 'utsuccess d  q
 . do FAIL^%ut("KBAP(""ALLPTS UNITTEST"") incorrectly built")
 do CHKEQ^%ut(utsuccess,1,"Testing pulling patients through broker FAILED!")
 quit
 ;
UTPRVDS ; @TEST - Pulling Providers through the broker
 kill ^SAMIUT("UNIT TEST PROVIDERS")
 new root set root=$$setroot^%wd("providers")
 merge ^SAMIUT("UNIT TEST PROVIDERS")=@root
 set utsuccess=1
 new SAMIPVDS
 set SAMIPVDS=$$PRVDRS^SAMIVSTA
 if '$get(SAMIPVDS) do  quit
 . merge @root=^SAMIUT("UNIT TEST PROVIDERS") kill ^SAMIUT("UNIT TEST PROVIDERS")
 . do FAIL^%ut("No providers pulled through broker")
 new ien,DUZG,NAMEG
 for ien=1:1:$get(SAMIPVDS) do  quit:'utsuccess
 . set DUZG=@root@(ien,"duz")
 . set NAMEG=@root@(ien,"name")
 . if '$data(^XUSEC("PROVIDER",DUZG)) set utsuccess=0 quit
 .; if '$$ACTIVE^XUSER(DUZG) set utsuccess=0 quit
 . if '($$UP^XLFSTR(NAMEG))=($$UP^XLFSTR($piece($get(^VA(200,DUZG,0)),"^"))) do  quit
 .. set utsuccess=0
 merge @root=^SAMIUT("UNIT TEST PROVIDERS") kill ^SAMIUT("UNIT TEST PROVIDERS")
 do CHKEQ^%ut(utsuccess,1,"Testing pulling Providers through broker FAILED!")
 quit
 ;
UTRMDRS ; @TEST - Pulling Reminders through the broker
 kill ^SAMIUT("UNIT TEST REMINDERS")
 new root set root=$$setroot^%wd("reminders")
 merge ^SAMIUT("UNIT TEST REMINDERS")=@root
 set utsuccess=1
 new SAMIREMINDERS
 set SAMIREMINDERS=$$RMDRS^SAMIVSTA
 if '$get(SAMIREMINDERS) do  quit
 . merge @root=^SAMIUT("UNIT TEST REMINDERS")
 . kill ^SAMIUT("UNIT TEST REMINDERS")
 . do FAIL^%ut("No reminders pulled through broker")
 new IENV,IENG,NAMEG,PNAMEG,TYPEG
 for IENG=1:1:$get(SAMIREMINDERS) do  quit:'utsuccess
 . set NAMEG=@root@(IENG,"name") ; Mixed case
 . set PNAMEG=@root@(IENG,"printname") ; All caps
 . set TYPEG=@root@(IENG,"type")
 . set IENV=@root@(IENG,"ien")
 . if TYPEG="R" do  quit:'utsuccess
 .. if '$data(^PXD(811.9,"B",PNAMEG,IENV)) set utsuccess=0 quit
 .. if '$data(^PXD(811.9,"D",NAMEG,IENV)) set utsuccess=0 quit
 . if TYPEG="C" do  quit:'utsuccess
 .. if '($get(^PXRMD(811.7,IENV,0))=NAMEG) set utsuccess=0 quit
 merge @root=^SAMIUT("UNIT TEST REMINDERS")
 kill ^SAMIUT("UNIT TEST REMINDERS")
 do CHKEQ^%ut(utsuccess,1,"Testing pulling Reminders through broker FAILED!")
 quit
 ;
 ;
UTCLNC ; @TEST - Pulling Clinics through the broker
 kill ^SAMIUT("UNIT TEST CLINICS")
 new root set root=$$setroot^%wd("clinics")
 merge ^SAMIUT("UNIT TEST CLINICS")=@root
 set utsuccess=1
 new SAMICLNC
 set SAMICLNC=$$CLINICS^SAMIVSTA
 if '$get(SAMICLNC) do  quit
 . merge @root=^SAMIUT("UNIT TEST CLINICS")
 . kill ^SAMIUT("UNIT TEST CLINICS")
 . do FAIL^%ut("No clinics pulled through broker")
 new IENG,IENV,NAMEG
 for IENG=1:1:$get(SAMICLNC) do  quit:'utsuccess
 . set NAMEG=@root@(IENG,"name")
 . set IENV=@root@(IENG,"ien")
 . if '$data(^SC("B",NAMEG,IENV)) set utsuccess=0 quit
 merge @root=^SAMIUT("UNIT TEST CLINICS")
 kill ^SAMIUT("UNIT TEST CLINICS")
 do CHKEQ^%ut(utsuccess,1,"Testing pulling Clinics through broker FAILED!")
 quit
 ;
 ;
UTHF ; @TEST - Pulling Health Factors through the broker
 kill ^SAMIUT("UNIT TEST HEALTH FACTORS")
 new root set root=$$setroot^%wd("health-factors")
 merge ^SAMIUT("UNIT TEST HEALTH FACTORS")=@root
 set utsuccess=1
 new SAMIHF
 set SAMIHF=$$HLTHFCT^SAMIVSTA
 if '$get(SAMIHF) do  quit
 . merge @root=^SAMIUT("UNIT TEST HEALTH FACTORS")
 . kill ^SAMIUT("UNIT TEST HEALTH FACTORS")
 . do FAIL^%ut("No health factors pulled through broker")
 new IENV,IENG,NAMEG
 for IENG=1:1:$get(SAMIHF) do  quit:'utsuccess
 . set NAMEG=@root@(IENG,"name")
 . set IENV=@root@(IENG,"ien")
 . if '($piece($get(^AUTTHF(IENV,0)),"^")=NAMEG) set utsuccess=0 quit
 merge @root=^SAMIUT("UNIT TEST HEALTH FACTORS")
 kill ^SAMIUT("UNIT TEST HEALTH FACTORS")
 do CHKEQ^%ut(utsuccess,1,"Testing pulling Health Factors through broker FAILED!")
 quit
 ;
UTCLRG ; @TEST - Clear a Graphstore of entries
 new root set root=$$setroot^%wd("providers")
 kill ^SAMIUT("UNIT TEST CLRGRPH") merge ^SAMIUT("UNIT TEST CLRGRPH")=@root
 new cnt set cnt=$order(@root@("A"),-1)
 if 'cnt do  quit
 . do FAIL^%ut("No 'providers found' entry")
 set cnt=$$CLRGRPS^SAMIVSTA("providers"),cnt=$order(@root@("A"),-1)
 merge @root=^SAMIUT("UNIT TEST CLRGRPH") kill ^SAMIUT("UNIT TEST CLRGRPH")
 do CHKEQ^%ut(cnt,0,"Clear Graphstore FAILED!")
 quit
 ;
EOR ; End of Routine SAMIUTVS
