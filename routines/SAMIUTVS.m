SAMIUTVS ;;ven/arc/lgc - UNIT TEST for SAMIVSTS ; 10/22/18 3:19pm
 ;;18.0;SAMI;;
 ;
 ; VA-PALS will be using Sam Habiel's [KBANSCAU] broker
 ;   to pull information from the VA server into the
 ;   VA-PALS client and, to push TIU notes generated by
 ;   VA-PALS forms onto the VA server.
 ; Using this broker between VistA instances requires
 ;   not only the IP and Port for the server be known,
 ;   but also, that the Access and Verify of the user
 ;   on the server be sent across as well.  This is
 ;   required as the user on the server must have the
 ;   necessary Context menu(s) allowing use of the
 ;   Remote Procedure(s).
 ; Six parameters have been added to the client
 ;   VistA to prevent the necessity of hard coding
 ;   certain values and to allow for default values for others.
 ;   SAMI PORT
 ;   SAMI IP ADDRESS
 ;   SAMI ACCVER
 ;   SAMI DEFAULT PROVIDER
 ;   SAMI DEFAULT STATION NUMBER
 ;   SAMI TIU NOTE PRINT NAME
 ;   SAMI DEFAULT CLINIC IEN
 ;   SAMI SYSTEM TEST PATIENT DFN
 ; Note that the user selected must have active
 ;   credentials on both the Client and Server systems
 ;   and the following Broker context menu.
 ;      OR CPRS GUI CHART
 ;
 ; @section 0 primary development
 ;
 ; @routine-credits
 ; @primary-dev: Larry Carlson (lgc)
 ;  larry@fiscientific.com
 ; @primary-dev-org: Vista Expertise Network (ven)
 ;  http://vistaexpertise.net
 ; @copyright: 2012/2018, ven, all rights reserved
 ; @license: Apache 2.0
 ;  https://www.apache.org/licenses/LICENSE-2.0.html
 ;
 ; @application: SAMI
 ; @version: 18.0
 ; @patch-list: none yet
 ;
 ; @sac-exemption
 ;  sac 2.2.8 Vendor specific subroutines may not be called directly
 ;   except by Kernel, Mailman, & VA Fileman.
 ;  sac 2.3.3.2 No VistA package may use the following intrinsic
 ;   (system) variables unless they are accessed using Kernel or VA
 ;   FileMan supported references: $D[EVICE], $I[O], $K[EY],
 ;   $P[RINCIPAL], $ROLES, $ST[ACK], $SY[STEM], $Z*.
 ;   (Exemptions: Kernel & VA Fileman)
 ;  sac 2.9.1: Application software must use documented Kernel
 ;   supported references to perform all platform specific functions.
 ;   (Exemptions: Kernel & VA Fileman)
 ;  ============== UNIT TESTS ======================
 ;  NOTE: Unit tests will pull data using the local
 ;       client VistA files rather than risk degrading
 ;       large datasets in use.  NEVERTHELESS, it is
 ;       recommended that UNIT TESTS be run when
 ;       VA-PALS is not in use as some Graphstore globals
 ;       are temporarily moved while testing is running.
 ;
 ; @to-do
 ;
 ; @section 1 code
 ;
START I $T(^%ut)="" W !,"*** UNIT TEST NOT INSTALLED ***" Q
 D EN^%ut($T(+0),2)
 Q
 ;
 ;
UTMGPH ; @TEST - Test making 'patient-lookup' Graphstore
 I '$D(^KBAP("ALLPTS")) D  Q
 .  D FAIL^%ut("^KBAP(""ALLPTS"") must exist for TESTING")
 ;
 D MKGPH^SAMIVSTS ; Rebuild 'patient-lookup' Graphstore
 ; Check that the Graphstore was built
 n si s si=$O(^%wd(17.040801,"B","patient-lookup",0))
 I '$G(si) D  Q
 . D FAIL^%ut("MKGPH entry did not build 'patient-lookup' Graphstore")
 ;
 n NODE,SNODE,RSLT,root,gien,dfn
 s root=$$setroot^%wd("patient-lookup")
 S NODE=$NA(^KBAP("ALLPTS")),SNODE=$P(NODE,")")
 N KBAPFAIL S KBAPFAIL=0
 F  S NODE=$Q(@NODE) Q:NODE'[SNODE  D  Q:$G(KBAPFAIL)
 . S PTDATA=@NODE
 . S dfn=$P(PTDATA,"^",12)
 . s gien=$O(@root@("dfn",dfn,0))
 . I '$G(gien) D  S KBAPFAIL=1 Q
 .;
 .; Now compare the entries in this Graphstore node with
 .;  the information in the respective ^KBAP("ALLPTS" node
 . S KBAPFAIL=1
 . I '$O(@root@("last5",$P(PTDATA,"^",9),0)) Q
 . I '$L($P(PTDATA,"^")) Q
 . I '$O(@root@("name",$P(PTDATA,"^"),0)) Q
 . I '$L($P(PTDATA,"^",4)) Q
 . I '$O(@root@("name",$P(PTDATA,"^",4),0)) Q
 . I '$O(@root@("saminame",$P(PTDATA,"^",4),0)) Q
 . S KBAPFAIL=0
 ;
 I $G(KBAPFAIL) D  Q
 . D FAIL^%ut("'patient-lookup' Graphstore incorrectly built")
 D CHKEQ^%ut(KBAPFAIL,0,"Testing Complete Graphstore build  FAILED!")
 Q
 ;
UTAPTS ; @TEST - Test pulling patient data through broker
 K ^KBAP("ALLPTS UNITTEST")
 D ALLPTS1^SAMIVSTS("ALLPTS UNITTEST")
 ;                in file 2         in ALLPTS
 ;  name            piece 1          piece 1
 ;  sex             piece 2          piece 6
 ;  birthdate       piece 3 fmdt     piece 10 (yyyymmdd)
 ;
 ; Pull name from file 2 B cross
 ;   Get name,sex,birthdate,build last5
 ; Pull entry in Graphstore using last5
 ;   Knowing gien get name,sex,birthdate
 ; Compare
 N name2,sex2,dob2,last52,dfn2,nameG,sexG,dobG,last5G,dfnG
 N node2,nodeG,gien
 n root s root=$$setroot^%wd("patient-lookup")
 S (KBAPFAIL,dfn2)=0
 f  s dfn2=$O(^DPT(dfn2)) Q:'dfn2  D  Q:KBAPFAIL
 . s node2=$G(^DPT(dfn2,0))
 . s name2=$P(node2,"^")
 . s sex2=$$UP^XLFSTR($E($P(node2,"^",2)))
 . s dob2=$$FMTHL7^XLFDT($P(node2,"^",3))
 . s dob2=$E(dob2,1,4)_"-"_$E(dob2,5,6)_"-"_$E(dob2,7,8)
 . s gien=$O(@root@("dfn",dfn2,0))
 . s last52=$$UP^XLFSTR($E(name2))_$E($P(node2,"^",9),6,9)
 . I '$G(gien) S KBAPFAIL=1 Q
 . I '$D(@root@("name",name2,gien)) S KBAPFAIL=1 Q
 . I '($P($G(@root@(gien,"gender")),"^")=sex2) D  Q
 .. S KBAPFAIL=1
 . I '$D(@root@("last5",last52,gien)) S KBAPFAIL=1 Q
 . I '($G(@root@(gien,"sbdob"))=dob2) S KBAPFAIL=1 Q
 K ^KBAP("ALLPTS UNITTEST")
 I $G(KBAPFAIL) D  Q
 . D FAIL^%ut("KBAP(""ALLPTS UNITTEST"") incorrectly built")
 D CHKEQ^%ut(KBAPFAIL,0,"Testing pulling patients through broker FAILED!")
 Q
 ;
UTPRVDS ; @TEST - Pulling Providers through the broker
 K ^KBAP("UNIT TEST PROVIDERS")
 n root s root=$$setroot^%wd("providers")
 m ^KBAP("UNIT TEST PROVIDERS")=@root
 N KBAPPVDS,KBAPFAIL S KBAPFAIL=0
 S KBAPPVDS=$$Providers^SAMIVSTS
 I '$G(KBAPPVDS) D  Q
 . M @root=^KBAP("UNIT TEST PROVIDERS") K ^KBAP("UNIT TEST PROVIDERS")
 . D FAIL^%ut("No providers pulled through broker")
 n ien,duzG,nameG
 f ien=1:1:$G(KBAPPVDS) D  Q:$G(KBAPFAIL)
 . s duzG=@root@(ien,"duz")
 . s nameG=@root@(ien,"name")
 . I '$D(^XUSEC("PROVIDER",duzG)) S KBAPFAIL=1 Q
 .; I '$$ACTIVE^XUSER(duzG) S KBAPFAIL=1 Q
 . I '($$UP^XLFSTR(nameG))=($$UP^XLFSTR($P($G(^VA(200,duzG,0)),"^"))) D  Q
 .. S KBAPFAIL=1
 m @root=^KBAP("UNIT TEST PROVIDERS") K ^KBAP("UNIT TEST PROVIDERS")
 D CHKEQ^%ut(KBAPFAIL,0,"Testing pulling Providers through broker FAILED!")
 Q
 ;
UTRMDRS ; @TEST - Pulling Reminders through the broker
 K ^KBAP("UNIT TEST REMINDERS")
 n root s root=$$setroot^%wd("reminders")
 m ^KBAP("UNIT TEST REMINDERS")=@root
 N KBAPRMDR,KBAPFAIL S KBAPFAIL=0
 S KBAPRMDR=$$Reminders^SAMIVSTS
 I '$G(KBAPRMDR) D  Q
 . M @root=^KBAP("UNIT TEST REMINDERS")
 . K ^KBAP("UNIT TEST REMINDERS")
 . D FAIL^%ut("No reminders pulled through broker")
 n ienV,ienG,nameG,pnameG,typeG
 f ienG=1:1:$G(KBAPRMDR) D  Q:$G(KBAPFAIL)
 . s nameG=@root@(ienG,"name") ; Mixed case
 . s pnameG=@root@(ienG,"printname") ; All caps
 . s typeG=@root@(ienG,"type")
 . s ienV=@root@(ienG,"ien")
 . I typeG="R" D  Q:$G(KBAPFAIL)
 .. I '$D(^PXD(811.9,"B",pnameG,ienV)) S KBAPFAIL=1 Q
 .. I '$D(^PXD(811.9,"D",nameG,ienV)) S KBAPFAIL=1 Q
 . I typeG="C" D  Q:$G(KBAPFAIL)
 .. I '($G(^PXRMD(811.7,ienV,0))=nameG) S KBAPFAIL=1 Q
 m @root=^KBAP("UNIT TEST REMINDERS")
 K ^KBAP("UNIT TEST REMINDERS")
 D CHKEQ^%ut(KBAPFAIL,0,"Testing pulling Reminders through broker FAILED!")
 Q
 ;
 ;
UTCLNC ; @TEST - Pulling Clinics through the broker
 K ^KBAP("UNIT TEST CLINICS")
 n root s root=$$setroot^%wd("clinics")
 m ^KBAP("UNIT TEST CLINICS")=@root
 N KBAPCLNC,KBAPFAIL S KBAPFAIL=0
 S KBAPCLNC=$$Clinics^SAMIVSTS
 I '$G(KBAPCLNC) D  Q
 . M @root=^KBAP("UNIT TEST CLINICS")
 . K ^KBAP("UNIT TEST CLINICS")
 . D FAIL^%ut("No clinics pulled through broker")
 n ienG,ienV,nameG
 f ienG=1:1:$G(KBAPCLNC) D  Q:$G(KBAPFAIL)
 . s nameG=@root@(ienG,"name")
 . s ienV=@root@(ienG,"ien")
 . I '$D(^SC("B",nameG,ienV)) S KBAPFAIL=1 Q
 m @root=^KBAP("UNIT TEST CLINICS")
 K ^KBAP("UNIT TEST CLINICS")
 D CHKEQ^%ut(KBAPFAIL,0,"Testing pulling Clinics through broker FAILED!")
 Q
 ;
 ;
UTHF ; @TEST - Pulling Health Factors through the broker
 K ^KBAP("UNIT TEST HEALTH FACTORS")
 n root s root=$$setroot^%wd("health-factors")
 m ^KBAP("UNIT TEST HEALTH FACTORS")=@root
 N KBAPHF,KBAPFAIL S KBAPFAIL=0
 S KBAPHF=$$HealthFactors^SAMIVSTS
 I '$G(KBAPHF) D  Q
 . M @root=^KBAP("UNIT TEST HEALTH FACTORS")
 . K ^KBAP("UNIT TEST HEALTH FACTORS")
 . D FAIL^%ut("No health factors pulled through broker")
 n ienV,ienG,nameG
 f ienG=1:1:$G(KBAPHF) D  Q:$G(KBAPFAIL)
 . s nameG=@root@(ienG,"name")
 . s ienV=@root@(ienG,"ien")
 . I '($P($G(^AUTTHF(ienV,0)),"^")=nameG) S KBAPFAIL=1 Q
 m @root=^KBAP("UNIT TEST HEALTH FACTORS")
 K ^KBAP("UNIT TEST HEALTH FACTORS")
 D CHKEQ^%ut(KBAPFAIL,0,"Testing pulling Health Factors through broker FAILED!")
 Q
 ;
UTCLRG ; @TEST - Clear a Graphstore of entries
 n root s root=$$setroot^%wd("providers")
 K ^KBAP("UNIT TEST CLRGRPH") M ^KBAP("UNIT TEST CLRGRPH")=@root
 n cnt s cnt=$O(@root@("A"),-1)
 I 'cnt D  Q
 . D FAIL^%ut("No 'providers found' entry")
 s cnt=$$ClearGraphstore^SAMIVSTS("providers"),cnt=$O(@root@("A"),-1)
 M @root=^KBAP("UNIT TEST CLRGRPH") K ^KBAP("UNIT TEST CLRGRPH")
 D CHKEQ^%ut(cnt,0,"Clear Graphstore FAILED!")
 Q
EOR ; End of Routine SAMIUTVS
